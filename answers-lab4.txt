Part A
Q1
MPBOOTPHYS translates kernel virtual address to physical address at MPENTRY_PADDR. boot.S doesn't need this translation because virtual address 0 and KERNBASE are both mapped to the same physical address. Thus if we omit MPBOOTPHYS the system would raise a page fault exception.

Q2
If use a shared stack, it would go wrong when CPU0 pushes a trap frame and enters kernel mode, then CPU1 pushes another, then CPU0 pops the trap frame which should belong to CPU1.

Q3
Because all envs are mapped in kern_pgdir at address UENVS, which is unchanged when context is different.

Q4
Using this mechanism can ensure the complete environment state is saved and can be restored later as if it was never interrupted.
This happens at curenv->env_tf = *tf; .

Challenge (Fork with priority)
Implemented by changing sched_yield(), syscall(), and creating pfork(), sys_nice(). This makes the JOS able to run env with priority. The env with lowest priority number will be executed first.
I modified hello.c to test with this. Here is the result.

hello, world
i am environment 00001008
child 0 on
child 0    off
child 1 on
child 1    off
child 0    off
child 1    off
child 2 on
child 2    off
child 0    off
child 1    off
child 2    off
child 3 on
child 3    off
child 0    off
child 1    off
child 2    off
child 3    off
child 2    off
child 3    off
child 3    off

We can see it runs as expected. And grading is also all correct.